https://github.com/RolifyCommunity/rolify/wiki/Usage

Roles y scopes

- unit_user id Organization --> acceden a la unidad,
                                permiso escritura
- validator id Organization --> validar unidad
                                permiso escritur

- moderator id OrganizationType -->
    - crear periodos de esa organzación write/read Periodos
    - consultar datos de los distritos

- visitor: OrganizationType -> puede consultar datos e informes

- admin: acceso total

Rolify:

En modelos:
  rolify (user)
  resourcify (resto)

Métodos:
- user.role.blank? -> true sin roles
- user.add_role :unit_user, Unit.find(1)
- user.add_role :moderator, Organizations -> todas las organizaciones
- user.remove_role :moderator -> global, sobre todos los recursos
- user.has_role? :admin => true

Recursos level instancia

  unit = Unit.first
  unit.roles
    # => [ list of roles that are only bound to forum instance ]
  unit.applied_roles
    # => [ list of roles bound to forum instance and to the Forum class ]
Evalua varios roles y scopes
  user.has_all_roles? :admin, { :name => :moderator, :resource => Forum.last }
    => false
- user.has_any_role? :admin, { :name => :moderator, :resource => Forum.first }, { :name => :visitor, :resource => Forum }
    => true

Recursos level class
  user.is_moderator_of? Forum.last

  Forum.with_role(:admin)
    # => [ list of Forum instances that have role "admin" bound to them ]
  Forum.with_role(:admin, current_user)
    # => [ list of Forum instances that have role "admin" bound to them and belong to current_user roles ]
  Forum.with_roles([:admin, :user], current_user)
    # => [ list of Forum instances that have role "admin" or "user" bound to them and belong to current_user roles ]

  User.with_any_role(:user, :admin)
    # => [ list of User instances that have role "admin" or "user" bound to them ]
  User.with_role(:site_admin, current_site)
    # => [ list of User instances that have a scoped role of "site_admin" to a site instance ]
  User.with_role(:site_admin, :any)
    # => [ list of User instances that have a scoped role of "site_admin" for any site instances ]
  User.with_all_roles(:site_admin, :admin)
    # => [ list of User instances that have a role of "site_admin" and a role of "admin" bound to it ]

  Forum.find_roles
    # => [ list of roles that are bound to any Forum instance or to the Forum class ]
  Forum.find_roles(:admin)
    # => [ list of roles that are bound to any Forum instance or to the Forum class, with "admin" as a role name ]
  Forum.find_roles(:admin, current_user)
    # => [ list of roles that are bound to any Forum instance, or to the Forum class
